
UART_GENERIC.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000aca  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000008  00800060  00000aca  00000b5e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000019  00800068  00800068  00000b66  2**0
                  ALLOC
  3 .stab         00000f54  00000000  00000000  00000b68  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000c5c  00000000  00000000  00001abc  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 d9 03 	jmp	0x7b2	; 0x7b2 <__vector_13>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ea ec       	ldi	r30, 0xCA	; 202
  68:	fa e0       	ldi	r31, 0x0A	; 10
  6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
  70:	a8 36       	cpi	r26, 0x68	; 104
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
  76:	10 e0       	ldi	r17, 0x00	; 0
  78:	a8 e6       	ldi	r26, 0x68	; 104
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a1 38       	cpi	r26, 0x81	; 129
  82:	b1 07       	cpc	r27, r17
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 53 00 	call	0xa6	; 0xa6 <main>
  8a:	0c 94 63 05 	jmp	0xac6	; 0xac6 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <mycall>:
uint8 data;
uint8 newdata=0;
uint8 Str[20];

void mycall(void)
{
  92:	df 93       	push	r29
  94:	cf 93       	push	r28
  96:	cd b7       	in	r28, 0x3d	; 61
  98:	de b7       	in	r29, 0x3e	; 62
	newdata=1;
  9a:	81 e0       	ldi	r24, 0x01	; 1
  9c:	80 93 68 00 	sts	0x0068, r24
}
  a0:	cf 91       	pop	r28
  a2:	df 91       	pop	r29
  a4:	08 95       	ret

000000a6 <main>:
int main(void)
{
  a6:	df 93       	push	r29
  a8:	cf 93       	push	r28
  aa:	cd b7       	in	r28, 0x3d	; 61
  ac:	de b7       	in	r29, 0x3e	; 62
  ae:	2c 97       	sbiw	r28, 0x0c	; 12
  b0:	0f b6       	in	r0, 0x3f	; 63
  b2:	f8 94       	cli
  b4:	de bf       	out	0x3e, r29	; 62
  b6:	0f be       	out	0x3f, r0	; 63
  b8:	cd bf       	out	0x3d, r28	; 61
	//uint8 data;
	UART_CONFIG_TYPE config={DISABLED,ONE_BIT,EIGHT_BITS,9600};
  ba:	ce 01       	movw	r24, r28
  bc:	01 96       	adiw	r24, 0x01	; 1
  be:	99 87       	std	Y+9, r25	; 0x09
  c0:	88 87       	std	Y+8, r24	; 0x08
  c2:	e0 e6       	ldi	r30, 0x60	; 96
  c4:	f0 e0       	ldi	r31, 0x00	; 0
  c6:	fb 87       	std	Y+11, r31	; 0x0b
  c8:	ea 87       	std	Y+10, r30	; 0x0a
  ca:	f7 e0       	ldi	r31, 0x07	; 7
  cc:	fc 87       	std	Y+12, r31	; 0x0c
  ce:	ea 85       	ldd	r30, Y+10	; 0x0a
  d0:	fb 85       	ldd	r31, Y+11	; 0x0b
  d2:	00 80       	ld	r0, Z
  d4:	8a 85       	ldd	r24, Y+10	; 0x0a
  d6:	9b 85       	ldd	r25, Y+11	; 0x0b
  d8:	01 96       	adiw	r24, 0x01	; 1
  da:	9b 87       	std	Y+11, r25	; 0x0b
  dc:	8a 87       	std	Y+10, r24	; 0x0a
  de:	e8 85       	ldd	r30, Y+8	; 0x08
  e0:	f9 85       	ldd	r31, Y+9	; 0x09
  e2:	00 82       	st	Z, r0
  e4:	88 85       	ldd	r24, Y+8	; 0x08
  e6:	99 85       	ldd	r25, Y+9	; 0x09
  e8:	01 96       	adiw	r24, 0x01	; 1
  ea:	99 87       	std	Y+9, r25	; 0x09
  ec:	88 87       	std	Y+8, r24	; 0x08
  ee:	9c 85       	ldd	r25, Y+12	; 0x0c
  f0:	91 50       	subi	r25, 0x01	; 1
  f2:	9c 87       	std	Y+12, r25	; 0x0c
  f4:	ec 85       	ldd	r30, Y+12	; 0x0c
  f6:	ee 23       	and	r30, r30
  f8:	51 f7       	brne	.-44     	; 0xce <main+0x28>
	/* Initialize the UART driver with Baud-rate = 9600 bits/sec */
	UART_init(&config);
  fa:	ce 01       	movw	r24, r28
  fc:	01 96       	adiw	r24, 0x01	; 1
  fe:	0e 94 0b 04 	call	0x816	; 0x816 <UART_init>
	SREG |=(1<<7);
 102:	af e5       	ldi	r26, 0x5F	; 95
 104:	b0 e0       	ldi	r27, 0x00	; 0
 106:	ef e5       	ldi	r30, 0x5F	; 95
 108:	f0 e0       	ldi	r31, 0x00	; 0
 10a:	80 81       	ld	r24, Z
 10c:	80 68       	ori	r24, 0x80	; 128
 10e:	8c 93       	st	X, r24
	UART_setCallBack(mycall);
 110:	89 e4       	ldi	r24, 0x49	; 73
 112:	90 e0       	ldi	r25, 0x00	; 0
 114:	0e 94 b4 04 	call	0x968	; 0x968 <UART_setCallBack>
    	{
     	UART_sendByte(data);
     	newdata=0;
    	}*//* Re-send the received byte to Terminal */

		UART_receiveString(Str);
 118:	8c e6       	ldi	r24, 0x6C	; 108
 11a:	90 e0       	ldi	r25, 0x00	; 0
 11c:	0e 94 fd 04 	call	0x9fa	; 0x9fa <UART_receiveString>
		/* Receive String from Terminal */
   if(newdata==1)
 120:	80 91 68 00 	lds	r24, 0x0068
 124:	81 30       	cpi	r24, 0x01	; 1
 126:	c1 f7       	brne	.-16     	; 0x118 <main+0x72>
{
	    UART_sendString(Str);
 128:	8c e6       	ldi	r24, 0x6C	; 108
 12a:	90 e0       	ldi	r25, 0x00	; 0
 12c:	0e 94 c6 04 	call	0x98c	; 0x98c <UART_sendString>
	    newdata=0;
 130:	10 92 68 00 	sts	0x0068, r1
 134:	f1 cf       	rjmp	.-30     	; 0x118 <main+0x72>

00000136 <GPIO_setupPinDirection>:
 * Description :
 * Setup the direction of the required pin input/output.
 * If the input port number or pin number are not correct, The function will not handle the request.
 */
void GPIO_setupPinDirection(uint8 port_num, uint8 pin_num, GPIO_PinDirectionType direction)
{
 136:	df 93       	push	r29
 138:	cf 93       	push	r28
 13a:	00 d0       	rcall	.+0      	; 0x13c <GPIO_setupPinDirection+0x6>
 13c:	00 d0       	rcall	.+0      	; 0x13e <GPIO_setupPinDirection+0x8>
 13e:	0f 92       	push	r0
 140:	cd b7       	in	r28, 0x3d	; 61
 142:	de b7       	in	r29, 0x3e	; 62
 144:	89 83       	std	Y+1, r24	; 0x01
 146:	6a 83       	std	Y+2, r22	; 0x02
 148:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
 14a:	8a 81       	ldd	r24, Y+2	; 0x02
 14c:	88 30       	cpi	r24, 0x08	; 8
 14e:	08 f0       	brcs	.+2      	; 0x152 <GPIO_setupPinDirection+0x1c>
 150:	d5 c0       	rjmp	.+426    	; 0x2fc <GPIO_setupPinDirection+0x1c6>
 152:	89 81       	ldd	r24, Y+1	; 0x01
 154:	84 30       	cpi	r24, 0x04	; 4
 156:	08 f0       	brcs	.+2      	; 0x15a <GPIO_setupPinDirection+0x24>
 158:	d1 c0       	rjmp	.+418    	; 0x2fc <GPIO_setupPinDirection+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Setup the pin direction as required */
		switch(port_num)
 15a:	89 81       	ldd	r24, Y+1	; 0x01
 15c:	28 2f       	mov	r18, r24
 15e:	30 e0       	ldi	r19, 0x00	; 0
 160:	3d 83       	std	Y+5, r19	; 0x05
 162:	2c 83       	std	Y+4, r18	; 0x04
 164:	8c 81       	ldd	r24, Y+4	; 0x04
 166:	9d 81       	ldd	r25, Y+5	; 0x05
 168:	81 30       	cpi	r24, 0x01	; 1
 16a:	91 05       	cpc	r25, r1
 16c:	09 f4       	brne	.+2      	; 0x170 <GPIO_setupPinDirection+0x3a>
 16e:	43 c0       	rjmp	.+134    	; 0x1f6 <GPIO_setupPinDirection+0xc0>
 170:	2c 81       	ldd	r18, Y+4	; 0x04
 172:	3d 81       	ldd	r19, Y+5	; 0x05
 174:	22 30       	cpi	r18, 0x02	; 2
 176:	31 05       	cpc	r19, r1
 178:	2c f4       	brge	.+10     	; 0x184 <GPIO_setupPinDirection+0x4e>
 17a:	8c 81       	ldd	r24, Y+4	; 0x04
 17c:	9d 81       	ldd	r25, Y+5	; 0x05
 17e:	00 97       	sbiw	r24, 0x00	; 0
 180:	71 f0       	breq	.+28     	; 0x19e <GPIO_setupPinDirection+0x68>
 182:	bc c0       	rjmp	.+376    	; 0x2fc <GPIO_setupPinDirection+0x1c6>
 184:	2c 81       	ldd	r18, Y+4	; 0x04
 186:	3d 81       	ldd	r19, Y+5	; 0x05
 188:	22 30       	cpi	r18, 0x02	; 2
 18a:	31 05       	cpc	r19, r1
 18c:	09 f4       	brne	.+2      	; 0x190 <GPIO_setupPinDirection+0x5a>
 18e:	5f c0       	rjmp	.+190    	; 0x24e <GPIO_setupPinDirection+0x118>
 190:	8c 81       	ldd	r24, Y+4	; 0x04
 192:	9d 81       	ldd	r25, Y+5	; 0x05
 194:	83 30       	cpi	r24, 0x03	; 3
 196:	91 05       	cpc	r25, r1
 198:	09 f4       	brne	.+2      	; 0x19c <GPIO_setupPinDirection+0x66>
 19a:	85 c0       	rjmp	.+266    	; 0x2a6 <GPIO_setupPinDirection+0x170>
 19c:	af c0       	rjmp	.+350    	; 0x2fc <GPIO_setupPinDirection+0x1c6>
		{
		case PORTA_ID:
			if(direction == PIN_OUTPUT)
 19e:	8b 81       	ldd	r24, Y+3	; 0x03
 1a0:	81 30       	cpi	r24, 0x01	; 1
 1a2:	a1 f4       	brne	.+40     	; 0x1cc <GPIO_setupPinDirection+0x96>
			{
				SET_BIT(DDRA,pin_num);
 1a4:	aa e3       	ldi	r26, 0x3A	; 58
 1a6:	b0 e0       	ldi	r27, 0x00	; 0
 1a8:	ea e3       	ldi	r30, 0x3A	; 58
 1aa:	f0 e0       	ldi	r31, 0x00	; 0
 1ac:	80 81       	ld	r24, Z
 1ae:	48 2f       	mov	r20, r24
 1b0:	8a 81       	ldd	r24, Y+2	; 0x02
 1b2:	28 2f       	mov	r18, r24
 1b4:	30 e0       	ldi	r19, 0x00	; 0
 1b6:	81 e0       	ldi	r24, 0x01	; 1
 1b8:	90 e0       	ldi	r25, 0x00	; 0
 1ba:	02 2e       	mov	r0, r18
 1bc:	02 c0       	rjmp	.+4      	; 0x1c2 <GPIO_setupPinDirection+0x8c>
 1be:	88 0f       	add	r24, r24
 1c0:	99 1f       	adc	r25, r25
 1c2:	0a 94       	dec	r0
 1c4:	e2 f7       	brpl	.-8      	; 0x1be <GPIO_setupPinDirection+0x88>
 1c6:	84 2b       	or	r24, r20
 1c8:	8c 93       	st	X, r24
 1ca:	98 c0       	rjmp	.+304    	; 0x2fc <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRA,pin_num);
 1cc:	aa e3       	ldi	r26, 0x3A	; 58
 1ce:	b0 e0       	ldi	r27, 0x00	; 0
 1d0:	ea e3       	ldi	r30, 0x3A	; 58
 1d2:	f0 e0       	ldi	r31, 0x00	; 0
 1d4:	80 81       	ld	r24, Z
 1d6:	48 2f       	mov	r20, r24
 1d8:	8a 81       	ldd	r24, Y+2	; 0x02
 1da:	28 2f       	mov	r18, r24
 1dc:	30 e0       	ldi	r19, 0x00	; 0
 1de:	81 e0       	ldi	r24, 0x01	; 1
 1e0:	90 e0       	ldi	r25, 0x00	; 0
 1e2:	02 2e       	mov	r0, r18
 1e4:	02 c0       	rjmp	.+4      	; 0x1ea <GPIO_setupPinDirection+0xb4>
 1e6:	88 0f       	add	r24, r24
 1e8:	99 1f       	adc	r25, r25
 1ea:	0a 94       	dec	r0
 1ec:	e2 f7       	brpl	.-8      	; 0x1e6 <GPIO_setupPinDirection+0xb0>
 1ee:	80 95       	com	r24
 1f0:	84 23       	and	r24, r20
 1f2:	8c 93       	st	X, r24
 1f4:	83 c0       	rjmp	.+262    	; 0x2fc <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTB_ID:
			if(direction == PIN_OUTPUT)
 1f6:	8b 81       	ldd	r24, Y+3	; 0x03
 1f8:	81 30       	cpi	r24, 0x01	; 1
 1fa:	a1 f4       	brne	.+40     	; 0x224 <GPIO_setupPinDirection+0xee>
			{
				SET_BIT(DDRB,pin_num);
 1fc:	a7 e3       	ldi	r26, 0x37	; 55
 1fe:	b0 e0       	ldi	r27, 0x00	; 0
 200:	e7 e3       	ldi	r30, 0x37	; 55
 202:	f0 e0       	ldi	r31, 0x00	; 0
 204:	80 81       	ld	r24, Z
 206:	48 2f       	mov	r20, r24
 208:	8a 81       	ldd	r24, Y+2	; 0x02
 20a:	28 2f       	mov	r18, r24
 20c:	30 e0       	ldi	r19, 0x00	; 0
 20e:	81 e0       	ldi	r24, 0x01	; 1
 210:	90 e0       	ldi	r25, 0x00	; 0
 212:	02 2e       	mov	r0, r18
 214:	02 c0       	rjmp	.+4      	; 0x21a <GPIO_setupPinDirection+0xe4>
 216:	88 0f       	add	r24, r24
 218:	99 1f       	adc	r25, r25
 21a:	0a 94       	dec	r0
 21c:	e2 f7       	brpl	.-8      	; 0x216 <GPIO_setupPinDirection+0xe0>
 21e:	84 2b       	or	r24, r20
 220:	8c 93       	st	X, r24
 222:	6c c0       	rjmp	.+216    	; 0x2fc <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRB,pin_num);
 224:	a7 e3       	ldi	r26, 0x37	; 55
 226:	b0 e0       	ldi	r27, 0x00	; 0
 228:	e7 e3       	ldi	r30, 0x37	; 55
 22a:	f0 e0       	ldi	r31, 0x00	; 0
 22c:	80 81       	ld	r24, Z
 22e:	48 2f       	mov	r20, r24
 230:	8a 81       	ldd	r24, Y+2	; 0x02
 232:	28 2f       	mov	r18, r24
 234:	30 e0       	ldi	r19, 0x00	; 0
 236:	81 e0       	ldi	r24, 0x01	; 1
 238:	90 e0       	ldi	r25, 0x00	; 0
 23a:	02 2e       	mov	r0, r18
 23c:	02 c0       	rjmp	.+4      	; 0x242 <GPIO_setupPinDirection+0x10c>
 23e:	88 0f       	add	r24, r24
 240:	99 1f       	adc	r25, r25
 242:	0a 94       	dec	r0
 244:	e2 f7       	brpl	.-8      	; 0x23e <GPIO_setupPinDirection+0x108>
 246:	80 95       	com	r24
 248:	84 23       	and	r24, r20
 24a:	8c 93       	st	X, r24
 24c:	57 c0       	rjmp	.+174    	; 0x2fc <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTC_ID:
			if(direction == PIN_OUTPUT)
 24e:	8b 81       	ldd	r24, Y+3	; 0x03
 250:	81 30       	cpi	r24, 0x01	; 1
 252:	a1 f4       	brne	.+40     	; 0x27c <GPIO_setupPinDirection+0x146>
			{
				SET_BIT(DDRC,pin_num);
 254:	a4 e3       	ldi	r26, 0x34	; 52
 256:	b0 e0       	ldi	r27, 0x00	; 0
 258:	e4 e3       	ldi	r30, 0x34	; 52
 25a:	f0 e0       	ldi	r31, 0x00	; 0
 25c:	80 81       	ld	r24, Z
 25e:	48 2f       	mov	r20, r24
 260:	8a 81       	ldd	r24, Y+2	; 0x02
 262:	28 2f       	mov	r18, r24
 264:	30 e0       	ldi	r19, 0x00	; 0
 266:	81 e0       	ldi	r24, 0x01	; 1
 268:	90 e0       	ldi	r25, 0x00	; 0
 26a:	02 2e       	mov	r0, r18
 26c:	02 c0       	rjmp	.+4      	; 0x272 <GPIO_setupPinDirection+0x13c>
 26e:	88 0f       	add	r24, r24
 270:	99 1f       	adc	r25, r25
 272:	0a 94       	dec	r0
 274:	e2 f7       	brpl	.-8      	; 0x26e <GPIO_setupPinDirection+0x138>
 276:	84 2b       	or	r24, r20
 278:	8c 93       	st	X, r24
 27a:	40 c0       	rjmp	.+128    	; 0x2fc <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRC,pin_num);
 27c:	a4 e3       	ldi	r26, 0x34	; 52
 27e:	b0 e0       	ldi	r27, 0x00	; 0
 280:	e4 e3       	ldi	r30, 0x34	; 52
 282:	f0 e0       	ldi	r31, 0x00	; 0
 284:	80 81       	ld	r24, Z
 286:	48 2f       	mov	r20, r24
 288:	8a 81       	ldd	r24, Y+2	; 0x02
 28a:	28 2f       	mov	r18, r24
 28c:	30 e0       	ldi	r19, 0x00	; 0
 28e:	81 e0       	ldi	r24, 0x01	; 1
 290:	90 e0       	ldi	r25, 0x00	; 0
 292:	02 2e       	mov	r0, r18
 294:	02 c0       	rjmp	.+4      	; 0x29a <GPIO_setupPinDirection+0x164>
 296:	88 0f       	add	r24, r24
 298:	99 1f       	adc	r25, r25
 29a:	0a 94       	dec	r0
 29c:	e2 f7       	brpl	.-8      	; 0x296 <GPIO_setupPinDirection+0x160>
 29e:	80 95       	com	r24
 2a0:	84 23       	and	r24, r20
 2a2:	8c 93       	st	X, r24
 2a4:	2b c0       	rjmp	.+86     	; 0x2fc <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTD_ID:
			if(direction == PIN_OUTPUT)
 2a6:	8b 81       	ldd	r24, Y+3	; 0x03
 2a8:	81 30       	cpi	r24, 0x01	; 1
 2aa:	a1 f4       	brne	.+40     	; 0x2d4 <GPIO_setupPinDirection+0x19e>
			{
				SET_BIT(DDRD,pin_num);
 2ac:	a1 e3       	ldi	r26, 0x31	; 49
 2ae:	b0 e0       	ldi	r27, 0x00	; 0
 2b0:	e1 e3       	ldi	r30, 0x31	; 49
 2b2:	f0 e0       	ldi	r31, 0x00	; 0
 2b4:	80 81       	ld	r24, Z
 2b6:	48 2f       	mov	r20, r24
 2b8:	8a 81       	ldd	r24, Y+2	; 0x02
 2ba:	28 2f       	mov	r18, r24
 2bc:	30 e0       	ldi	r19, 0x00	; 0
 2be:	81 e0       	ldi	r24, 0x01	; 1
 2c0:	90 e0       	ldi	r25, 0x00	; 0
 2c2:	02 2e       	mov	r0, r18
 2c4:	02 c0       	rjmp	.+4      	; 0x2ca <GPIO_setupPinDirection+0x194>
 2c6:	88 0f       	add	r24, r24
 2c8:	99 1f       	adc	r25, r25
 2ca:	0a 94       	dec	r0
 2cc:	e2 f7       	brpl	.-8      	; 0x2c6 <GPIO_setupPinDirection+0x190>
 2ce:	84 2b       	or	r24, r20
 2d0:	8c 93       	st	X, r24
 2d2:	14 c0       	rjmp	.+40     	; 0x2fc <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRD,pin_num);
 2d4:	a1 e3       	ldi	r26, 0x31	; 49
 2d6:	b0 e0       	ldi	r27, 0x00	; 0
 2d8:	e1 e3       	ldi	r30, 0x31	; 49
 2da:	f0 e0       	ldi	r31, 0x00	; 0
 2dc:	80 81       	ld	r24, Z
 2de:	48 2f       	mov	r20, r24
 2e0:	8a 81       	ldd	r24, Y+2	; 0x02
 2e2:	28 2f       	mov	r18, r24
 2e4:	30 e0       	ldi	r19, 0x00	; 0
 2e6:	81 e0       	ldi	r24, 0x01	; 1
 2e8:	90 e0       	ldi	r25, 0x00	; 0
 2ea:	02 2e       	mov	r0, r18
 2ec:	02 c0       	rjmp	.+4      	; 0x2f2 <GPIO_setupPinDirection+0x1bc>
 2ee:	88 0f       	add	r24, r24
 2f0:	99 1f       	adc	r25, r25
 2f2:	0a 94       	dec	r0
 2f4:	e2 f7       	brpl	.-8      	; 0x2ee <GPIO_setupPinDirection+0x1b8>
 2f6:	80 95       	com	r24
 2f8:	84 23       	and	r24, r20
 2fa:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
 2fc:	0f 90       	pop	r0
 2fe:	0f 90       	pop	r0
 300:	0f 90       	pop	r0
 302:	0f 90       	pop	r0
 304:	0f 90       	pop	r0
 306:	cf 91       	pop	r28
 308:	df 91       	pop	r29
 30a:	08 95       	ret

0000030c <GPIO_writePin>:
 * Write the value Logic High or Logic Low on the required pin.
 * If the input port number or pin number are not correct, The function will not handle the request.
 * If the pin is input, this function will enable/disable the internal pull-up resistor.
 */
void GPIO_writePin(uint8 port_num, uint8 pin_num, uint8 value)
{
 30c:	df 93       	push	r29
 30e:	cf 93       	push	r28
 310:	00 d0       	rcall	.+0      	; 0x312 <GPIO_writePin+0x6>
 312:	00 d0       	rcall	.+0      	; 0x314 <GPIO_writePin+0x8>
 314:	0f 92       	push	r0
 316:	cd b7       	in	r28, 0x3d	; 61
 318:	de b7       	in	r29, 0x3e	; 62
 31a:	89 83       	std	Y+1, r24	; 0x01
 31c:	6a 83       	std	Y+2, r22	; 0x02
 31e:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
 320:	8a 81       	ldd	r24, Y+2	; 0x02
 322:	88 30       	cpi	r24, 0x08	; 8
 324:	08 f0       	brcs	.+2      	; 0x328 <GPIO_writePin+0x1c>
 326:	d5 c0       	rjmp	.+426    	; 0x4d2 <GPIO_writePin+0x1c6>
 328:	89 81       	ldd	r24, Y+1	; 0x01
 32a:	84 30       	cpi	r24, 0x04	; 4
 32c:	08 f0       	brcs	.+2      	; 0x330 <GPIO_writePin+0x24>
 32e:	d1 c0       	rjmp	.+418    	; 0x4d2 <GPIO_writePin+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Write the pin value as required */
		switch(port_num)
 330:	89 81       	ldd	r24, Y+1	; 0x01
 332:	28 2f       	mov	r18, r24
 334:	30 e0       	ldi	r19, 0x00	; 0
 336:	3d 83       	std	Y+5, r19	; 0x05
 338:	2c 83       	std	Y+4, r18	; 0x04
 33a:	8c 81       	ldd	r24, Y+4	; 0x04
 33c:	9d 81       	ldd	r25, Y+5	; 0x05
 33e:	81 30       	cpi	r24, 0x01	; 1
 340:	91 05       	cpc	r25, r1
 342:	09 f4       	brne	.+2      	; 0x346 <GPIO_writePin+0x3a>
 344:	43 c0       	rjmp	.+134    	; 0x3cc <GPIO_writePin+0xc0>
 346:	2c 81       	ldd	r18, Y+4	; 0x04
 348:	3d 81       	ldd	r19, Y+5	; 0x05
 34a:	22 30       	cpi	r18, 0x02	; 2
 34c:	31 05       	cpc	r19, r1
 34e:	2c f4       	brge	.+10     	; 0x35a <GPIO_writePin+0x4e>
 350:	8c 81       	ldd	r24, Y+4	; 0x04
 352:	9d 81       	ldd	r25, Y+5	; 0x05
 354:	00 97       	sbiw	r24, 0x00	; 0
 356:	71 f0       	breq	.+28     	; 0x374 <GPIO_writePin+0x68>
 358:	bc c0       	rjmp	.+376    	; 0x4d2 <GPIO_writePin+0x1c6>
 35a:	2c 81       	ldd	r18, Y+4	; 0x04
 35c:	3d 81       	ldd	r19, Y+5	; 0x05
 35e:	22 30       	cpi	r18, 0x02	; 2
 360:	31 05       	cpc	r19, r1
 362:	09 f4       	brne	.+2      	; 0x366 <GPIO_writePin+0x5a>
 364:	5f c0       	rjmp	.+190    	; 0x424 <GPIO_writePin+0x118>
 366:	8c 81       	ldd	r24, Y+4	; 0x04
 368:	9d 81       	ldd	r25, Y+5	; 0x05
 36a:	83 30       	cpi	r24, 0x03	; 3
 36c:	91 05       	cpc	r25, r1
 36e:	09 f4       	brne	.+2      	; 0x372 <GPIO_writePin+0x66>
 370:	85 c0       	rjmp	.+266    	; 0x47c <GPIO_writePin+0x170>
 372:	af c0       	rjmp	.+350    	; 0x4d2 <GPIO_writePin+0x1c6>
		{
		case PORTA_ID:
			if(value == LOGIC_HIGH)
 374:	8b 81       	ldd	r24, Y+3	; 0x03
 376:	81 30       	cpi	r24, 0x01	; 1
 378:	a1 f4       	brne	.+40     	; 0x3a2 <GPIO_writePin+0x96>
			{
				SET_BIT(PORTA,pin_num);
 37a:	ab e3       	ldi	r26, 0x3B	; 59
 37c:	b0 e0       	ldi	r27, 0x00	; 0
 37e:	eb e3       	ldi	r30, 0x3B	; 59
 380:	f0 e0       	ldi	r31, 0x00	; 0
 382:	80 81       	ld	r24, Z
 384:	48 2f       	mov	r20, r24
 386:	8a 81       	ldd	r24, Y+2	; 0x02
 388:	28 2f       	mov	r18, r24
 38a:	30 e0       	ldi	r19, 0x00	; 0
 38c:	81 e0       	ldi	r24, 0x01	; 1
 38e:	90 e0       	ldi	r25, 0x00	; 0
 390:	02 2e       	mov	r0, r18
 392:	02 c0       	rjmp	.+4      	; 0x398 <GPIO_writePin+0x8c>
 394:	88 0f       	add	r24, r24
 396:	99 1f       	adc	r25, r25
 398:	0a 94       	dec	r0
 39a:	e2 f7       	brpl	.-8      	; 0x394 <GPIO_writePin+0x88>
 39c:	84 2b       	or	r24, r20
 39e:	8c 93       	st	X, r24
 3a0:	98 c0       	rjmp	.+304    	; 0x4d2 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTA,pin_num);
 3a2:	ab e3       	ldi	r26, 0x3B	; 59
 3a4:	b0 e0       	ldi	r27, 0x00	; 0
 3a6:	eb e3       	ldi	r30, 0x3B	; 59
 3a8:	f0 e0       	ldi	r31, 0x00	; 0
 3aa:	80 81       	ld	r24, Z
 3ac:	48 2f       	mov	r20, r24
 3ae:	8a 81       	ldd	r24, Y+2	; 0x02
 3b0:	28 2f       	mov	r18, r24
 3b2:	30 e0       	ldi	r19, 0x00	; 0
 3b4:	81 e0       	ldi	r24, 0x01	; 1
 3b6:	90 e0       	ldi	r25, 0x00	; 0
 3b8:	02 2e       	mov	r0, r18
 3ba:	02 c0       	rjmp	.+4      	; 0x3c0 <GPIO_writePin+0xb4>
 3bc:	88 0f       	add	r24, r24
 3be:	99 1f       	adc	r25, r25
 3c0:	0a 94       	dec	r0
 3c2:	e2 f7       	brpl	.-8      	; 0x3bc <GPIO_writePin+0xb0>
 3c4:	80 95       	com	r24
 3c6:	84 23       	and	r24, r20
 3c8:	8c 93       	st	X, r24
 3ca:	83 c0       	rjmp	.+262    	; 0x4d2 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTB_ID:
			if(value == LOGIC_HIGH)
 3cc:	8b 81       	ldd	r24, Y+3	; 0x03
 3ce:	81 30       	cpi	r24, 0x01	; 1
 3d0:	a1 f4       	brne	.+40     	; 0x3fa <GPIO_writePin+0xee>
			{
				SET_BIT(PORTB,pin_num);
 3d2:	a8 e3       	ldi	r26, 0x38	; 56
 3d4:	b0 e0       	ldi	r27, 0x00	; 0
 3d6:	e8 e3       	ldi	r30, 0x38	; 56
 3d8:	f0 e0       	ldi	r31, 0x00	; 0
 3da:	80 81       	ld	r24, Z
 3dc:	48 2f       	mov	r20, r24
 3de:	8a 81       	ldd	r24, Y+2	; 0x02
 3e0:	28 2f       	mov	r18, r24
 3e2:	30 e0       	ldi	r19, 0x00	; 0
 3e4:	81 e0       	ldi	r24, 0x01	; 1
 3e6:	90 e0       	ldi	r25, 0x00	; 0
 3e8:	02 2e       	mov	r0, r18
 3ea:	02 c0       	rjmp	.+4      	; 0x3f0 <GPIO_writePin+0xe4>
 3ec:	88 0f       	add	r24, r24
 3ee:	99 1f       	adc	r25, r25
 3f0:	0a 94       	dec	r0
 3f2:	e2 f7       	brpl	.-8      	; 0x3ec <GPIO_writePin+0xe0>
 3f4:	84 2b       	or	r24, r20
 3f6:	8c 93       	st	X, r24
 3f8:	6c c0       	rjmp	.+216    	; 0x4d2 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTB,pin_num);
 3fa:	a8 e3       	ldi	r26, 0x38	; 56
 3fc:	b0 e0       	ldi	r27, 0x00	; 0
 3fe:	e8 e3       	ldi	r30, 0x38	; 56
 400:	f0 e0       	ldi	r31, 0x00	; 0
 402:	80 81       	ld	r24, Z
 404:	48 2f       	mov	r20, r24
 406:	8a 81       	ldd	r24, Y+2	; 0x02
 408:	28 2f       	mov	r18, r24
 40a:	30 e0       	ldi	r19, 0x00	; 0
 40c:	81 e0       	ldi	r24, 0x01	; 1
 40e:	90 e0       	ldi	r25, 0x00	; 0
 410:	02 2e       	mov	r0, r18
 412:	02 c0       	rjmp	.+4      	; 0x418 <GPIO_writePin+0x10c>
 414:	88 0f       	add	r24, r24
 416:	99 1f       	adc	r25, r25
 418:	0a 94       	dec	r0
 41a:	e2 f7       	brpl	.-8      	; 0x414 <GPIO_writePin+0x108>
 41c:	80 95       	com	r24
 41e:	84 23       	and	r24, r20
 420:	8c 93       	st	X, r24
 422:	57 c0       	rjmp	.+174    	; 0x4d2 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTC_ID:
			if(value == LOGIC_HIGH)
 424:	8b 81       	ldd	r24, Y+3	; 0x03
 426:	81 30       	cpi	r24, 0x01	; 1
 428:	a1 f4       	brne	.+40     	; 0x452 <GPIO_writePin+0x146>
			{
				SET_BIT(PORTC,pin_num);
 42a:	a5 e3       	ldi	r26, 0x35	; 53
 42c:	b0 e0       	ldi	r27, 0x00	; 0
 42e:	e5 e3       	ldi	r30, 0x35	; 53
 430:	f0 e0       	ldi	r31, 0x00	; 0
 432:	80 81       	ld	r24, Z
 434:	48 2f       	mov	r20, r24
 436:	8a 81       	ldd	r24, Y+2	; 0x02
 438:	28 2f       	mov	r18, r24
 43a:	30 e0       	ldi	r19, 0x00	; 0
 43c:	81 e0       	ldi	r24, 0x01	; 1
 43e:	90 e0       	ldi	r25, 0x00	; 0
 440:	02 2e       	mov	r0, r18
 442:	02 c0       	rjmp	.+4      	; 0x448 <GPIO_writePin+0x13c>
 444:	88 0f       	add	r24, r24
 446:	99 1f       	adc	r25, r25
 448:	0a 94       	dec	r0
 44a:	e2 f7       	brpl	.-8      	; 0x444 <GPIO_writePin+0x138>
 44c:	84 2b       	or	r24, r20
 44e:	8c 93       	st	X, r24
 450:	40 c0       	rjmp	.+128    	; 0x4d2 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTC,pin_num);
 452:	a5 e3       	ldi	r26, 0x35	; 53
 454:	b0 e0       	ldi	r27, 0x00	; 0
 456:	e5 e3       	ldi	r30, 0x35	; 53
 458:	f0 e0       	ldi	r31, 0x00	; 0
 45a:	80 81       	ld	r24, Z
 45c:	48 2f       	mov	r20, r24
 45e:	8a 81       	ldd	r24, Y+2	; 0x02
 460:	28 2f       	mov	r18, r24
 462:	30 e0       	ldi	r19, 0x00	; 0
 464:	81 e0       	ldi	r24, 0x01	; 1
 466:	90 e0       	ldi	r25, 0x00	; 0
 468:	02 2e       	mov	r0, r18
 46a:	02 c0       	rjmp	.+4      	; 0x470 <GPIO_writePin+0x164>
 46c:	88 0f       	add	r24, r24
 46e:	99 1f       	adc	r25, r25
 470:	0a 94       	dec	r0
 472:	e2 f7       	brpl	.-8      	; 0x46c <GPIO_writePin+0x160>
 474:	80 95       	com	r24
 476:	84 23       	and	r24, r20
 478:	8c 93       	st	X, r24
 47a:	2b c0       	rjmp	.+86     	; 0x4d2 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTD_ID:
			if(value == LOGIC_HIGH)
 47c:	8b 81       	ldd	r24, Y+3	; 0x03
 47e:	81 30       	cpi	r24, 0x01	; 1
 480:	a1 f4       	brne	.+40     	; 0x4aa <GPIO_writePin+0x19e>
			{
				SET_BIT(PORTD,pin_num);
 482:	a2 e3       	ldi	r26, 0x32	; 50
 484:	b0 e0       	ldi	r27, 0x00	; 0
 486:	e2 e3       	ldi	r30, 0x32	; 50
 488:	f0 e0       	ldi	r31, 0x00	; 0
 48a:	80 81       	ld	r24, Z
 48c:	48 2f       	mov	r20, r24
 48e:	8a 81       	ldd	r24, Y+2	; 0x02
 490:	28 2f       	mov	r18, r24
 492:	30 e0       	ldi	r19, 0x00	; 0
 494:	81 e0       	ldi	r24, 0x01	; 1
 496:	90 e0       	ldi	r25, 0x00	; 0
 498:	02 2e       	mov	r0, r18
 49a:	02 c0       	rjmp	.+4      	; 0x4a0 <GPIO_writePin+0x194>
 49c:	88 0f       	add	r24, r24
 49e:	99 1f       	adc	r25, r25
 4a0:	0a 94       	dec	r0
 4a2:	e2 f7       	brpl	.-8      	; 0x49c <GPIO_writePin+0x190>
 4a4:	84 2b       	or	r24, r20
 4a6:	8c 93       	st	X, r24
 4a8:	14 c0       	rjmp	.+40     	; 0x4d2 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTD,pin_num);
 4aa:	a2 e3       	ldi	r26, 0x32	; 50
 4ac:	b0 e0       	ldi	r27, 0x00	; 0
 4ae:	e2 e3       	ldi	r30, 0x32	; 50
 4b0:	f0 e0       	ldi	r31, 0x00	; 0
 4b2:	80 81       	ld	r24, Z
 4b4:	48 2f       	mov	r20, r24
 4b6:	8a 81       	ldd	r24, Y+2	; 0x02
 4b8:	28 2f       	mov	r18, r24
 4ba:	30 e0       	ldi	r19, 0x00	; 0
 4bc:	81 e0       	ldi	r24, 0x01	; 1
 4be:	90 e0       	ldi	r25, 0x00	; 0
 4c0:	02 2e       	mov	r0, r18
 4c2:	02 c0       	rjmp	.+4      	; 0x4c8 <GPIO_writePin+0x1bc>
 4c4:	88 0f       	add	r24, r24
 4c6:	99 1f       	adc	r25, r25
 4c8:	0a 94       	dec	r0
 4ca:	e2 f7       	brpl	.-8      	; 0x4c4 <GPIO_writePin+0x1b8>
 4cc:	80 95       	com	r24
 4ce:	84 23       	and	r24, r20
 4d0:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
 4d2:	0f 90       	pop	r0
 4d4:	0f 90       	pop	r0
 4d6:	0f 90       	pop	r0
 4d8:	0f 90       	pop	r0
 4da:	0f 90       	pop	r0
 4dc:	cf 91       	pop	r28
 4de:	df 91       	pop	r29
 4e0:	08 95       	ret

000004e2 <GPIO_readPin>:
 * Description :
 * Read and return the value for the required pin, it should be Logic High or Logic Low.
 * If the input port number or pin number are not correct, The function will return Logic Low.
 */
uint8 GPIO_readPin(uint8 port_num, uint8 pin_num)
{
 4e2:	df 93       	push	r29
 4e4:	cf 93       	push	r28
 4e6:	00 d0       	rcall	.+0      	; 0x4e8 <GPIO_readPin+0x6>
 4e8:	00 d0       	rcall	.+0      	; 0x4ea <GPIO_readPin+0x8>
 4ea:	0f 92       	push	r0
 4ec:	cd b7       	in	r28, 0x3d	; 61
 4ee:	de b7       	in	r29, 0x3e	; 62
 4f0:	8a 83       	std	Y+2, r24	; 0x02
 4f2:	6b 83       	std	Y+3, r22	; 0x03
	uint8 pin_value = LOGIC_LOW;
 4f4:	19 82       	std	Y+1, r1	; 0x01
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
 4f6:	8b 81       	ldd	r24, Y+3	; 0x03
 4f8:	88 30       	cpi	r24, 0x08	; 8
 4fa:	08 f0       	brcs	.+2      	; 0x4fe <GPIO_readPin+0x1c>
 4fc:	84 c0       	rjmp	.+264    	; 0x606 <GPIO_readPin+0x124>
 4fe:	8a 81       	ldd	r24, Y+2	; 0x02
 500:	84 30       	cpi	r24, 0x04	; 4
 502:	08 f0       	brcs	.+2      	; 0x506 <GPIO_readPin+0x24>
 504:	80 c0       	rjmp	.+256    	; 0x606 <GPIO_readPin+0x124>
		/* Do Nothing */
	}
	else
	{
		/* Read the pin value as required */
		switch(port_num)
 506:	8a 81       	ldd	r24, Y+2	; 0x02
 508:	28 2f       	mov	r18, r24
 50a:	30 e0       	ldi	r19, 0x00	; 0
 50c:	3d 83       	std	Y+5, r19	; 0x05
 50e:	2c 83       	std	Y+4, r18	; 0x04
 510:	4c 81       	ldd	r20, Y+4	; 0x04
 512:	5d 81       	ldd	r21, Y+5	; 0x05
 514:	41 30       	cpi	r20, 0x01	; 1
 516:	51 05       	cpc	r21, r1
 518:	79 f1       	breq	.+94     	; 0x578 <GPIO_readPin+0x96>
 51a:	8c 81       	ldd	r24, Y+4	; 0x04
 51c:	9d 81       	ldd	r25, Y+5	; 0x05
 51e:	82 30       	cpi	r24, 0x02	; 2
 520:	91 05       	cpc	r25, r1
 522:	34 f4       	brge	.+12     	; 0x530 <GPIO_readPin+0x4e>
 524:	2c 81       	ldd	r18, Y+4	; 0x04
 526:	3d 81       	ldd	r19, Y+5	; 0x05
 528:	21 15       	cp	r18, r1
 52a:	31 05       	cpc	r19, r1
 52c:	69 f0       	breq	.+26     	; 0x548 <GPIO_readPin+0x66>
 52e:	6b c0       	rjmp	.+214    	; 0x606 <GPIO_readPin+0x124>
 530:	4c 81       	ldd	r20, Y+4	; 0x04
 532:	5d 81       	ldd	r21, Y+5	; 0x05
 534:	42 30       	cpi	r20, 0x02	; 2
 536:	51 05       	cpc	r21, r1
 538:	b9 f1       	breq	.+110    	; 0x5a8 <GPIO_readPin+0xc6>
 53a:	8c 81       	ldd	r24, Y+4	; 0x04
 53c:	9d 81       	ldd	r25, Y+5	; 0x05
 53e:	83 30       	cpi	r24, 0x03	; 3
 540:	91 05       	cpc	r25, r1
 542:	09 f4       	brne	.+2      	; 0x546 <GPIO_readPin+0x64>
 544:	49 c0       	rjmp	.+146    	; 0x5d8 <GPIO_readPin+0xf6>
 546:	5f c0       	rjmp	.+190    	; 0x606 <GPIO_readPin+0x124>
		{
		case PORTA_ID:
			if(BIT_IS_SET(PINA,pin_num))
 548:	e9 e3       	ldi	r30, 0x39	; 57
 54a:	f0 e0       	ldi	r31, 0x00	; 0
 54c:	80 81       	ld	r24, Z
 54e:	28 2f       	mov	r18, r24
 550:	30 e0       	ldi	r19, 0x00	; 0
 552:	8b 81       	ldd	r24, Y+3	; 0x03
 554:	88 2f       	mov	r24, r24
 556:	90 e0       	ldi	r25, 0x00	; 0
 558:	a9 01       	movw	r20, r18
 55a:	02 c0       	rjmp	.+4      	; 0x560 <GPIO_readPin+0x7e>
 55c:	55 95       	asr	r21
 55e:	47 95       	ror	r20
 560:	8a 95       	dec	r24
 562:	e2 f7       	brpl	.-8      	; 0x55c <GPIO_readPin+0x7a>
 564:	ca 01       	movw	r24, r20
 566:	81 70       	andi	r24, 0x01	; 1
 568:	90 70       	andi	r25, 0x00	; 0
 56a:	88 23       	and	r24, r24
 56c:	19 f0       	breq	.+6      	; 0x574 <GPIO_readPin+0x92>
			{
				pin_value = LOGIC_HIGH;
 56e:	81 e0       	ldi	r24, 0x01	; 1
 570:	89 83       	std	Y+1, r24	; 0x01
 572:	49 c0       	rjmp	.+146    	; 0x606 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
 574:	19 82       	std	Y+1, r1	; 0x01
 576:	47 c0       	rjmp	.+142    	; 0x606 <GPIO_readPin+0x124>
			}
			break;
		case PORTB_ID:
			if(BIT_IS_SET(PINB,pin_num))
 578:	e6 e3       	ldi	r30, 0x36	; 54
 57a:	f0 e0       	ldi	r31, 0x00	; 0
 57c:	80 81       	ld	r24, Z
 57e:	28 2f       	mov	r18, r24
 580:	30 e0       	ldi	r19, 0x00	; 0
 582:	8b 81       	ldd	r24, Y+3	; 0x03
 584:	88 2f       	mov	r24, r24
 586:	90 e0       	ldi	r25, 0x00	; 0
 588:	a9 01       	movw	r20, r18
 58a:	02 c0       	rjmp	.+4      	; 0x590 <GPIO_readPin+0xae>
 58c:	55 95       	asr	r21
 58e:	47 95       	ror	r20
 590:	8a 95       	dec	r24
 592:	e2 f7       	brpl	.-8      	; 0x58c <GPIO_readPin+0xaa>
 594:	ca 01       	movw	r24, r20
 596:	81 70       	andi	r24, 0x01	; 1
 598:	90 70       	andi	r25, 0x00	; 0
 59a:	88 23       	and	r24, r24
 59c:	19 f0       	breq	.+6      	; 0x5a4 <GPIO_readPin+0xc2>
			{
				pin_value = LOGIC_HIGH;
 59e:	81 e0       	ldi	r24, 0x01	; 1
 5a0:	89 83       	std	Y+1, r24	; 0x01
 5a2:	31 c0       	rjmp	.+98     	; 0x606 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
 5a4:	19 82       	std	Y+1, r1	; 0x01
 5a6:	2f c0       	rjmp	.+94     	; 0x606 <GPIO_readPin+0x124>
			}
			break;
		case PORTC_ID:
			if(BIT_IS_SET(PINC,pin_num))
 5a8:	e3 e3       	ldi	r30, 0x33	; 51
 5aa:	f0 e0       	ldi	r31, 0x00	; 0
 5ac:	80 81       	ld	r24, Z
 5ae:	28 2f       	mov	r18, r24
 5b0:	30 e0       	ldi	r19, 0x00	; 0
 5b2:	8b 81       	ldd	r24, Y+3	; 0x03
 5b4:	88 2f       	mov	r24, r24
 5b6:	90 e0       	ldi	r25, 0x00	; 0
 5b8:	a9 01       	movw	r20, r18
 5ba:	02 c0       	rjmp	.+4      	; 0x5c0 <GPIO_readPin+0xde>
 5bc:	55 95       	asr	r21
 5be:	47 95       	ror	r20
 5c0:	8a 95       	dec	r24
 5c2:	e2 f7       	brpl	.-8      	; 0x5bc <GPIO_readPin+0xda>
 5c4:	ca 01       	movw	r24, r20
 5c6:	81 70       	andi	r24, 0x01	; 1
 5c8:	90 70       	andi	r25, 0x00	; 0
 5ca:	88 23       	and	r24, r24
 5cc:	19 f0       	breq	.+6      	; 0x5d4 <GPIO_readPin+0xf2>
			{
				pin_value = LOGIC_HIGH;
 5ce:	81 e0       	ldi	r24, 0x01	; 1
 5d0:	89 83       	std	Y+1, r24	; 0x01
 5d2:	19 c0       	rjmp	.+50     	; 0x606 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
 5d4:	19 82       	std	Y+1, r1	; 0x01
 5d6:	17 c0       	rjmp	.+46     	; 0x606 <GPIO_readPin+0x124>
			}
			break;
		case PORTD_ID:
			if(BIT_IS_SET(PIND,pin_num))
 5d8:	e0 e3       	ldi	r30, 0x30	; 48
 5da:	f0 e0       	ldi	r31, 0x00	; 0
 5dc:	80 81       	ld	r24, Z
 5de:	28 2f       	mov	r18, r24
 5e0:	30 e0       	ldi	r19, 0x00	; 0
 5e2:	8b 81       	ldd	r24, Y+3	; 0x03
 5e4:	88 2f       	mov	r24, r24
 5e6:	90 e0       	ldi	r25, 0x00	; 0
 5e8:	a9 01       	movw	r20, r18
 5ea:	02 c0       	rjmp	.+4      	; 0x5f0 <GPIO_readPin+0x10e>
 5ec:	55 95       	asr	r21
 5ee:	47 95       	ror	r20
 5f0:	8a 95       	dec	r24
 5f2:	e2 f7       	brpl	.-8      	; 0x5ec <GPIO_readPin+0x10a>
 5f4:	ca 01       	movw	r24, r20
 5f6:	81 70       	andi	r24, 0x01	; 1
 5f8:	90 70       	andi	r25, 0x00	; 0
 5fa:	88 23       	and	r24, r24
 5fc:	19 f0       	breq	.+6      	; 0x604 <GPIO_readPin+0x122>
			{
				pin_value = LOGIC_HIGH;
 5fe:	81 e0       	ldi	r24, 0x01	; 1
 600:	89 83       	std	Y+1, r24	; 0x01
 602:	01 c0       	rjmp	.+2      	; 0x606 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
 604:	19 82       	std	Y+1, r1	; 0x01
			}
			break;
		}
	}

	return pin_value;
 606:	89 81       	ldd	r24, Y+1	; 0x01
}
 608:	0f 90       	pop	r0
 60a:	0f 90       	pop	r0
 60c:	0f 90       	pop	r0
 60e:	0f 90       	pop	r0
 610:	0f 90       	pop	r0
 612:	cf 91       	pop	r28
 614:	df 91       	pop	r29
 616:	08 95       	ret

00000618 <GPIO_setupPortDirection>:
 * If the direction value is PORT_INPUT all pins in this port should be input pins.
 * If the direction value is PORT_OUTPUT all pins in this port should be output pins.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_setupPortDirection(uint8 port_num, GPIO_PortDirectionType direction)
{
 618:	df 93       	push	r29
 61a:	cf 93       	push	r28
 61c:	00 d0       	rcall	.+0      	; 0x61e <GPIO_setupPortDirection+0x6>
 61e:	00 d0       	rcall	.+0      	; 0x620 <GPIO_setupPortDirection+0x8>
 620:	cd b7       	in	r28, 0x3d	; 61
 622:	de b7       	in	r29, 0x3e	; 62
 624:	89 83       	std	Y+1, r24	; 0x01
 626:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
 628:	89 81       	ldd	r24, Y+1	; 0x01
 62a:	84 30       	cpi	r24, 0x04	; 4
 62c:	90 f5       	brcc	.+100    	; 0x692 <GPIO_setupPortDirection+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Setup the port direction as required */
		switch(port_num)
 62e:	89 81       	ldd	r24, Y+1	; 0x01
 630:	28 2f       	mov	r18, r24
 632:	30 e0       	ldi	r19, 0x00	; 0
 634:	3c 83       	std	Y+4, r19	; 0x04
 636:	2b 83       	std	Y+3, r18	; 0x03
 638:	8b 81       	ldd	r24, Y+3	; 0x03
 63a:	9c 81       	ldd	r25, Y+4	; 0x04
 63c:	81 30       	cpi	r24, 0x01	; 1
 63e:	91 05       	cpc	r25, r1
 640:	d1 f0       	breq	.+52     	; 0x676 <GPIO_setupPortDirection+0x5e>
 642:	2b 81       	ldd	r18, Y+3	; 0x03
 644:	3c 81       	ldd	r19, Y+4	; 0x04
 646:	22 30       	cpi	r18, 0x02	; 2
 648:	31 05       	cpc	r19, r1
 64a:	2c f4       	brge	.+10     	; 0x656 <GPIO_setupPortDirection+0x3e>
 64c:	8b 81       	ldd	r24, Y+3	; 0x03
 64e:	9c 81       	ldd	r25, Y+4	; 0x04
 650:	00 97       	sbiw	r24, 0x00	; 0
 652:	61 f0       	breq	.+24     	; 0x66c <GPIO_setupPortDirection+0x54>
 654:	1e c0       	rjmp	.+60     	; 0x692 <GPIO_setupPortDirection+0x7a>
 656:	2b 81       	ldd	r18, Y+3	; 0x03
 658:	3c 81       	ldd	r19, Y+4	; 0x04
 65a:	22 30       	cpi	r18, 0x02	; 2
 65c:	31 05       	cpc	r19, r1
 65e:	81 f0       	breq	.+32     	; 0x680 <GPIO_setupPortDirection+0x68>
 660:	8b 81       	ldd	r24, Y+3	; 0x03
 662:	9c 81       	ldd	r25, Y+4	; 0x04
 664:	83 30       	cpi	r24, 0x03	; 3
 666:	91 05       	cpc	r25, r1
 668:	81 f0       	breq	.+32     	; 0x68a <GPIO_setupPortDirection+0x72>
 66a:	13 c0       	rjmp	.+38     	; 0x692 <GPIO_setupPortDirection+0x7a>
		{
		case PORTA_ID:
			DDRA = direction;
 66c:	ea e3       	ldi	r30, 0x3A	; 58
 66e:	f0 e0       	ldi	r31, 0x00	; 0
 670:	8a 81       	ldd	r24, Y+2	; 0x02
 672:	80 83       	st	Z, r24
 674:	0e c0       	rjmp	.+28     	; 0x692 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTB_ID:
			DDRB = direction;
 676:	e7 e3       	ldi	r30, 0x37	; 55
 678:	f0 e0       	ldi	r31, 0x00	; 0
 67a:	8a 81       	ldd	r24, Y+2	; 0x02
 67c:	80 83       	st	Z, r24
 67e:	09 c0       	rjmp	.+18     	; 0x692 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTC_ID:
			DDRC = direction;
 680:	e4 e3       	ldi	r30, 0x34	; 52
 682:	f0 e0       	ldi	r31, 0x00	; 0
 684:	8a 81       	ldd	r24, Y+2	; 0x02
 686:	80 83       	st	Z, r24
 688:	04 c0       	rjmp	.+8      	; 0x692 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTD_ID:
			DDRD = direction;
 68a:	e1 e3       	ldi	r30, 0x31	; 49
 68c:	f0 e0       	ldi	r31, 0x00	; 0
 68e:	8a 81       	ldd	r24, Y+2	; 0x02
 690:	80 83       	st	Z, r24
			break;
		}
	}
}
 692:	0f 90       	pop	r0
 694:	0f 90       	pop	r0
 696:	0f 90       	pop	r0
 698:	0f 90       	pop	r0
 69a:	cf 91       	pop	r28
 69c:	df 91       	pop	r29
 69e:	08 95       	ret

000006a0 <GPIO_writePort>:
 * If any pin in the port is output pin the value will be written.
 * If any pin in the port is input pin this will activate/deactivate the internal pull-up resistor.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_writePort(uint8 port_num, uint8 value)
{
 6a0:	df 93       	push	r29
 6a2:	cf 93       	push	r28
 6a4:	00 d0       	rcall	.+0      	; 0x6a6 <GPIO_writePort+0x6>
 6a6:	00 d0       	rcall	.+0      	; 0x6a8 <GPIO_writePort+0x8>
 6a8:	cd b7       	in	r28, 0x3d	; 61
 6aa:	de b7       	in	r29, 0x3e	; 62
 6ac:	89 83       	std	Y+1, r24	; 0x01
 6ae:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
 6b0:	89 81       	ldd	r24, Y+1	; 0x01
 6b2:	84 30       	cpi	r24, 0x04	; 4
 6b4:	90 f5       	brcc	.+100    	; 0x71a <GPIO_writePort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Write the port value as required */
		switch(port_num)
 6b6:	89 81       	ldd	r24, Y+1	; 0x01
 6b8:	28 2f       	mov	r18, r24
 6ba:	30 e0       	ldi	r19, 0x00	; 0
 6bc:	3c 83       	std	Y+4, r19	; 0x04
 6be:	2b 83       	std	Y+3, r18	; 0x03
 6c0:	8b 81       	ldd	r24, Y+3	; 0x03
 6c2:	9c 81       	ldd	r25, Y+4	; 0x04
 6c4:	81 30       	cpi	r24, 0x01	; 1
 6c6:	91 05       	cpc	r25, r1
 6c8:	d1 f0       	breq	.+52     	; 0x6fe <GPIO_writePort+0x5e>
 6ca:	2b 81       	ldd	r18, Y+3	; 0x03
 6cc:	3c 81       	ldd	r19, Y+4	; 0x04
 6ce:	22 30       	cpi	r18, 0x02	; 2
 6d0:	31 05       	cpc	r19, r1
 6d2:	2c f4       	brge	.+10     	; 0x6de <GPIO_writePort+0x3e>
 6d4:	8b 81       	ldd	r24, Y+3	; 0x03
 6d6:	9c 81       	ldd	r25, Y+4	; 0x04
 6d8:	00 97       	sbiw	r24, 0x00	; 0
 6da:	61 f0       	breq	.+24     	; 0x6f4 <GPIO_writePort+0x54>
 6dc:	1e c0       	rjmp	.+60     	; 0x71a <GPIO_writePort+0x7a>
 6de:	2b 81       	ldd	r18, Y+3	; 0x03
 6e0:	3c 81       	ldd	r19, Y+4	; 0x04
 6e2:	22 30       	cpi	r18, 0x02	; 2
 6e4:	31 05       	cpc	r19, r1
 6e6:	81 f0       	breq	.+32     	; 0x708 <GPIO_writePort+0x68>
 6e8:	8b 81       	ldd	r24, Y+3	; 0x03
 6ea:	9c 81       	ldd	r25, Y+4	; 0x04
 6ec:	83 30       	cpi	r24, 0x03	; 3
 6ee:	91 05       	cpc	r25, r1
 6f0:	81 f0       	breq	.+32     	; 0x712 <GPIO_writePort+0x72>
 6f2:	13 c0       	rjmp	.+38     	; 0x71a <GPIO_writePort+0x7a>
		{
		case PORTA_ID:
			PORTA = value;
 6f4:	eb e3       	ldi	r30, 0x3B	; 59
 6f6:	f0 e0       	ldi	r31, 0x00	; 0
 6f8:	8a 81       	ldd	r24, Y+2	; 0x02
 6fa:	80 83       	st	Z, r24
 6fc:	0e c0       	rjmp	.+28     	; 0x71a <GPIO_writePort+0x7a>
			break;
		case PORTB_ID:
			PORTB = value;
 6fe:	e8 e3       	ldi	r30, 0x38	; 56
 700:	f0 e0       	ldi	r31, 0x00	; 0
 702:	8a 81       	ldd	r24, Y+2	; 0x02
 704:	80 83       	st	Z, r24
 706:	09 c0       	rjmp	.+18     	; 0x71a <GPIO_writePort+0x7a>
			break;
		case PORTC_ID:
			PORTC = value;
 708:	e5 e3       	ldi	r30, 0x35	; 53
 70a:	f0 e0       	ldi	r31, 0x00	; 0
 70c:	8a 81       	ldd	r24, Y+2	; 0x02
 70e:	80 83       	st	Z, r24
 710:	04 c0       	rjmp	.+8      	; 0x71a <GPIO_writePort+0x7a>
			break;
		case PORTD_ID:
			PORTD = value;
 712:	e2 e3       	ldi	r30, 0x32	; 50
 714:	f0 e0       	ldi	r31, 0x00	; 0
 716:	8a 81       	ldd	r24, Y+2	; 0x02
 718:	80 83       	st	Z, r24
			break;
		}
	}
}
 71a:	0f 90       	pop	r0
 71c:	0f 90       	pop	r0
 71e:	0f 90       	pop	r0
 720:	0f 90       	pop	r0
 722:	cf 91       	pop	r28
 724:	df 91       	pop	r29
 726:	08 95       	ret

00000728 <GPIO_readPort>:
 * Description :
 * Read and return the value of the required port.
 * If the input port number is not correct, The function will return ZERO value.
 */
uint8 GPIO_readPort(uint8 port_num)
{
 728:	df 93       	push	r29
 72a:	cf 93       	push	r28
 72c:	00 d0       	rcall	.+0      	; 0x72e <GPIO_readPort+0x6>
 72e:	00 d0       	rcall	.+0      	; 0x730 <GPIO_readPort+0x8>
 730:	cd b7       	in	r28, 0x3d	; 61
 732:	de b7       	in	r29, 0x3e	; 62
 734:	8a 83       	std	Y+2, r24	; 0x02
	uint8 value = LOGIC_LOW;
 736:	19 82       	std	Y+1, r1	; 0x01

	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
 738:	8a 81       	ldd	r24, Y+2	; 0x02
 73a:	84 30       	cpi	r24, 0x04	; 4
 73c:	90 f5       	brcc	.+100    	; 0x7a2 <GPIO_readPort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Read the port value as required */
		switch(port_num)
 73e:	8a 81       	ldd	r24, Y+2	; 0x02
 740:	28 2f       	mov	r18, r24
 742:	30 e0       	ldi	r19, 0x00	; 0
 744:	3c 83       	std	Y+4, r19	; 0x04
 746:	2b 83       	std	Y+3, r18	; 0x03
 748:	8b 81       	ldd	r24, Y+3	; 0x03
 74a:	9c 81       	ldd	r25, Y+4	; 0x04
 74c:	81 30       	cpi	r24, 0x01	; 1
 74e:	91 05       	cpc	r25, r1
 750:	d1 f0       	breq	.+52     	; 0x786 <GPIO_readPort+0x5e>
 752:	2b 81       	ldd	r18, Y+3	; 0x03
 754:	3c 81       	ldd	r19, Y+4	; 0x04
 756:	22 30       	cpi	r18, 0x02	; 2
 758:	31 05       	cpc	r19, r1
 75a:	2c f4       	brge	.+10     	; 0x766 <GPIO_readPort+0x3e>
 75c:	8b 81       	ldd	r24, Y+3	; 0x03
 75e:	9c 81       	ldd	r25, Y+4	; 0x04
 760:	00 97       	sbiw	r24, 0x00	; 0
 762:	61 f0       	breq	.+24     	; 0x77c <GPIO_readPort+0x54>
 764:	1e c0       	rjmp	.+60     	; 0x7a2 <GPIO_readPort+0x7a>
 766:	2b 81       	ldd	r18, Y+3	; 0x03
 768:	3c 81       	ldd	r19, Y+4	; 0x04
 76a:	22 30       	cpi	r18, 0x02	; 2
 76c:	31 05       	cpc	r19, r1
 76e:	81 f0       	breq	.+32     	; 0x790 <GPIO_readPort+0x68>
 770:	8b 81       	ldd	r24, Y+3	; 0x03
 772:	9c 81       	ldd	r25, Y+4	; 0x04
 774:	83 30       	cpi	r24, 0x03	; 3
 776:	91 05       	cpc	r25, r1
 778:	81 f0       	breq	.+32     	; 0x79a <GPIO_readPort+0x72>
 77a:	13 c0       	rjmp	.+38     	; 0x7a2 <GPIO_readPort+0x7a>
		{
		case PORTA_ID:
			value = PINA;
 77c:	e9 e3       	ldi	r30, 0x39	; 57
 77e:	f0 e0       	ldi	r31, 0x00	; 0
 780:	80 81       	ld	r24, Z
 782:	89 83       	std	Y+1, r24	; 0x01
 784:	0e c0       	rjmp	.+28     	; 0x7a2 <GPIO_readPort+0x7a>
			break;
		case PORTB_ID:
			value = PINB;
 786:	e6 e3       	ldi	r30, 0x36	; 54
 788:	f0 e0       	ldi	r31, 0x00	; 0
 78a:	80 81       	ld	r24, Z
 78c:	89 83       	std	Y+1, r24	; 0x01
 78e:	09 c0       	rjmp	.+18     	; 0x7a2 <GPIO_readPort+0x7a>
			break;
		case PORTC_ID:
			value = PINC;
 790:	e3 e3       	ldi	r30, 0x33	; 51
 792:	f0 e0       	ldi	r31, 0x00	; 0
 794:	80 81       	ld	r24, Z
 796:	89 83       	std	Y+1, r24	; 0x01
 798:	04 c0       	rjmp	.+8      	; 0x7a2 <GPIO_readPort+0x7a>
			break;
		case PORTD_ID:
			value = PIND;
 79a:	e0 e3       	ldi	r30, 0x30	; 48
 79c:	f0 e0       	ldi	r31, 0x00	; 0
 79e:	80 81       	ld	r24, Z
 7a0:	89 83       	std	Y+1, r24	; 0x01
			break;
		}
	}

	return value;
 7a2:	89 81       	ldd	r24, Y+1	; 0x01
}
 7a4:	0f 90       	pop	r0
 7a6:	0f 90       	pop	r0
 7a8:	0f 90       	pop	r0
 7aa:	0f 90       	pop	r0
 7ac:	cf 91       	pop	r28
 7ae:	df 91       	pop	r29
 7b0:	08 95       	ret

000007b2 <__vector_13>:
#if(UART_TECHNIQUE==INTERRUPT)
volatile uint8 g_ubrr_Value = 0;
static volatile void(*g_uartRecieveCallBack)(void) = NULL_PTR;

ISR(USART_RXC_vect)
{
 7b2:	1f 92       	push	r1
 7b4:	0f 92       	push	r0
 7b6:	0f b6       	in	r0, 0x3f	; 63
 7b8:	0f 92       	push	r0
 7ba:	11 24       	eor	r1, r1
 7bc:	2f 93       	push	r18
 7be:	3f 93       	push	r19
 7c0:	4f 93       	push	r20
 7c2:	5f 93       	push	r21
 7c4:	6f 93       	push	r22
 7c6:	7f 93       	push	r23
 7c8:	8f 93       	push	r24
 7ca:	9f 93       	push	r25
 7cc:	af 93       	push	r26
 7ce:	bf 93       	push	r27
 7d0:	ef 93       	push	r30
 7d2:	ff 93       	push	r31
 7d4:	df 93       	push	r29
 7d6:	cf 93       	push	r28
 7d8:	cd b7       	in	r28, 0x3d	; 61
 7da:	de b7       	in	r29, 0x3e	; 62
	g_ubrr_Value = UDR;
 7dc:	ec e2       	ldi	r30, 0x2C	; 44
 7de:	f0 e0       	ldi	r31, 0x00	; 0
 7e0:	80 81       	ld	r24, Z
 7e2:	80 93 69 00 	sts	0x0069, r24
	(*g_uartRecieveCallBack)();
 7e6:	e0 91 6a 00 	lds	r30, 0x006A
 7ea:	f0 91 6b 00 	lds	r31, 0x006B
 7ee:	09 95       	icall
}
 7f0:	cf 91       	pop	r28
 7f2:	df 91       	pop	r29
 7f4:	ff 91       	pop	r31
 7f6:	ef 91       	pop	r30
 7f8:	bf 91       	pop	r27
 7fa:	af 91       	pop	r26
 7fc:	9f 91       	pop	r25
 7fe:	8f 91       	pop	r24
 800:	7f 91       	pop	r23
 802:	6f 91       	pop	r22
 804:	5f 91       	pop	r21
 806:	4f 91       	pop	r20
 808:	3f 91       	pop	r19
 80a:	2f 91       	pop	r18
 80c:	0f 90       	pop	r0
 80e:	0f be       	out	0x3f, r0	; 63
 810:	0f 90       	pop	r0
 812:	1f 90       	pop	r1
 814:	18 95       	reti

00000816 <UART_init>:
#endif

void UART_init(UART_CONFIG_TYPE (*config_type))
{
 816:	df 93       	push	r29
 818:	cf 93       	push	r28
 81a:	00 d0       	rcall	.+0      	; 0x81c <UART_init+0x6>
 81c:	00 d0       	rcall	.+0      	; 0x81e <UART_init+0x8>
 81e:	cd b7       	in	r28, 0x3d	; 61
 820:	de b7       	in	r29, 0x3e	; 62
 822:	9c 83       	std	Y+4, r25	; 0x04
 824:	8b 83       	std	Y+3, r24	; 0x03
	uint16 UBR_value=0;
 826:	1a 82       	std	Y+2, r1	; 0x02
 828:	19 82       	std	Y+1, r1	; 0x01
	/* Set the baud rate*/
	UBR_value=(uint32)(((F_CPU/(config_type->baudrate * 8UL)))-1);
 82a:	eb 81       	ldd	r30, Y+3	; 0x03
 82c:	fc 81       	ldd	r31, Y+4	; 0x04
 82e:	83 81       	ldd	r24, Z+3	; 0x03
 830:	94 81       	ldd	r25, Z+4	; 0x04
 832:	a5 81       	ldd	r26, Z+5	; 0x05
 834:	b6 81       	ldd	r27, Z+6	; 0x06
 836:	88 0f       	add	r24, r24
 838:	99 1f       	adc	r25, r25
 83a:	aa 1f       	adc	r26, r26
 83c:	bb 1f       	adc	r27, r27
 83e:	88 0f       	add	r24, r24
 840:	99 1f       	adc	r25, r25
 842:	aa 1f       	adc	r26, r26
 844:	bb 1f       	adc	r27, r27
 846:	88 0f       	add	r24, r24
 848:	99 1f       	adc	r25, r25
 84a:	aa 1f       	adc	r26, r26
 84c:	bb 1f       	adc	r27, r27
 84e:	9c 01       	movw	r18, r24
 850:	ad 01       	movw	r20, r26
 852:	80 e0       	ldi	r24, 0x00	; 0
 854:	94 e2       	ldi	r25, 0x24	; 36
 856:	a4 ef       	ldi	r26, 0xF4	; 244
 858:	b0 e0       	ldi	r27, 0x00	; 0
 85a:	bc 01       	movw	r22, r24
 85c:	cd 01       	movw	r24, r26
 85e:	0e 94 41 05 	call	0xa82	; 0xa82 <__udivmodsi4>
 862:	da 01       	movw	r26, r20
 864:	c9 01       	movw	r24, r18
 866:	01 97       	sbiw	r24, 0x01	; 1
 868:	9a 83       	std	Y+2, r25	; 0x02
 86a:	89 83       	std	Y+1, r24	; 0x01
	UBRRL=UBR_value;
 86c:	e9 e2       	ldi	r30, 0x29	; 41
 86e:	f0 e0       	ldi	r31, 0x00	; 0
 870:	89 81       	ldd	r24, Y+1	; 0x01
 872:	80 83       	st	Z, r24
	UBRRH=UBR_value >> 8;
 874:	e0 e4       	ldi	r30, 0x40	; 64
 876:	f0 e0       	ldi	r31, 0x00	; 0
 878:	89 81       	ldd	r24, Y+1	; 0x01
 87a:	9a 81       	ldd	r25, Y+2	; 0x02
 87c:	89 2f       	mov	r24, r25
 87e:	99 27       	eor	r25, r25
 880:	80 83       	st	Z, r24
	/* Set the double speed*/
	SET_BIT(UCSRA,U2X);
 882:	ab e2       	ldi	r26, 0x2B	; 43
 884:	b0 e0       	ldi	r27, 0x00	; 0
 886:	eb e2       	ldi	r30, 0x2B	; 43
 888:	f0 e0       	ldi	r31, 0x00	; 0
 88a:	80 81       	ld	r24, Z
 88c:	82 60       	ori	r24, 0x02	; 2
 88e:	8c 93       	st	X, r24
	/* Enable the transmitter and receiver*/
	SET_BIT(UCSRB,TXEN);
 890:	aa e2       	ldi	r26, 0x2A	; 42
 892:	b0 e0       	ldi	r27, 0x00	; 0
 894:	ea e2       	ldi	r30, 0x2A	; 42
 896:	f0 e0       	ldi	r31, 0x00	; 0
 898:	80 81       	ld	r24, Z
 89a:	88 60       	ori	r24, 0x08	; 8
 89c:	8c 93       	st	X, r24
	SET_BIT(UCSRB,RXEN);
 89e:	aa e2       	ldi	r26, 0x2A	; 42
 8a0:	b0 e0       	ldi	r27, 0x00	; 0
 8a2:	ea e2       	ldi	r30, 0x2A	; 42
 8a4:	f0 e0       	ldi	r31, 0x00	; 0
 8a6:	80 81       	ld	r24, Z
 8a8:	80 61       	ori	r24, 0x10	; 16
 8aa:	8c 93       	st	X, r24
	/* Set the number of data bit */
	SET_BIT(UCSRC,URSEL);
 8ac:	a0 e4       	ldi	r26, 0x40	; 64
 8ae:	b0 e0       	ldi	r27, 0x00	; 0
 8b0:	e0 e4       	ldi	r30, 0x40	; 64
 8b2:	f0 e0       	ldi	r31, 0x00	; 0
 8b4:	80 81       	ld	r24, Z
 8b6:	80 68       	ori	r24, 0x80	; 128
 8b8:	8c 93       	st	X, r24
	SET_BIT(UCSRB,RXCIE);
 8ba:	aa e2       	ldi	r26, 0x2A	; 42
 8bc:	b0 e0       	ldi	r27, 0x00	; 0
 8be:	ea e2       	ldi	r30, 0x2A	; 42
 8c0:	f0 e0       	ldi	r31, 0x00	; 0
 8c2:	80 81       	ld	r24, Z
 8c4:	80 68       	ori	r24, 0x80	; 128
 8c6:	8c 93       	st	X, r24
	UCSRC = (UCSRC & 0xF9) | (config_type->db << 1);
 8c8:	a0 e4       	ldi	r26, 0x40	; 64
 8ca:	b0 e0       	ldi	r27, 0x00	; 0
 8cc:	e0 e4       	ldi	r30, 0x40	; 64
 8ce:	f0 e0       	ldi	r31, 0x00	; 0
 8d0:	80 81       	ld	r24, Z
 8d2:	28 2f       	mov	r18, r24
 8d4:	29 7f       	andi	r18, 0xF9	; 249
 8d6:	eb 81       	ldd	r30, Y+3	; 0x03
 8d8:	fc 81       	ldd	r31, Y+4	; 0x04
 8da:	82 81       	ldd	r24, Z+2	; 0x02
 8dc:	88 2f       	mov	r24, r24
 8de:	90 e0       	ldi	r25, 0x00	; 0
 8e0:	88 0f       	add	r24, r24
 8e2:	99 1f       	adc	r25, r25
 8e4:	82 2b       	or	r24, r18
 8e6:	8c 93       	st	X, r24
	/* Set the parity mode*/
	UCSRC = (UCSRC & 0xCf) | (config_type->pm << 4);
 8e8:	a0 e4       	ldi	r26, 0x40	; 64
 8ea:	b0 e0       	ldi	r27, 0x00	; 0
 8ec:	e0 e4       	ldi	r30, 0x40	; 64
 8ee:	f0 e0       	ldi	r31, 0x00	; 0
 8f0:	80 81       	ld	r24, Z
 8f2:	28 2f       	mov	r18, r24
 8f4:	2f 7c       	andi	r18, 0xCF	; 207
 8f6:	eb 81       	ldd	r30, Y+3	; 0x03
 8f8:	fc 81       	ldd	r31, Y+4	; 0x04
 8fa:	80 81       	ld	r24, Z
 8fc:	88 2f       	mov	r24, r24
 8fe:	90 e0       	ldi	r25, 0x00	; 0
 900:	82 95       	swap	r24
 902:	92 95       	swap	r25
 904:	90 7f       	andi	r25, 0xF0	; 240
 906:	98 27       	eor	r25, r24
 908:	80 7f       	andi	r24, 0xF0	; 240
 90a:	98 27       	eor	r25, r24
 90c:	82 2b       	or	r24, r18
 90e:	8c 93       	st	X, r24

}
 910:	0f 90       	pop	r0
 912:	0f 90       	pop	r0
 914:	0f 90       	pop	r0
 916:	0f 90       	pop	r0
 918:	cf 91       	pop	r28
 91a:	df 91       	pop	r29
 91c:	08 95       	ret

0000091e <UART_sendByte>:
void UART_sendByte(uint8 byte)
{
 91e:	df 93       	push	r29
 920:	cf 93       	push	r28
 922:	0f 92       	push	r0
 924:	cd b7       	in	r28, 0x3d	; 61
 926:	de b7       	in	r29, 0x3e	; 62
 928:	89 83       	std	Y+1, r24	; 0x01
	while(BIT_IS_CLEAR(UCSRA,UDRE));
 92a:	eb e2       	ldi	r30, 0x2B	; 43
 92c:	f0 e0       	ldi	r31, 0x00	; 0
 92e:	80 81       	ld	r24, Z
 930:	88 2f       	mov	r24, r24
 932:	90 e0       	ldi	r25, 0x00	; 0
 934:	80 72       	andi	r24, 0x20	; 32
 936:	90 70       	andi	r25, 0x00	; 0
 938:	00 97       	sbiw	r24, 0x00	; 0
 93a:	b9 f3       	breq	.-18     	; 0x92a <UART_sendByte+0xc>
	UDR = byte;
 93c:	ec e2       	ldi	r30, 0x2C	; 44
 93e:	f0 e0       	ldi	r31, 0x00	; 0
 940:	89 81       	ldd	r24, Y+1	; 0x01
 942:	80 83       	st	Z, r24
}
 944:	0f 90       	pop	r0
 946:	cf 91       	pop	r28
 948:	df 91       	pop	r29
 94a:	08 95       	ret

0000094c <UART_receiveByteInterrupt>:
#if(UART_TECHNIQUE==INTERRUPT)
void UART_receiveByteInterrupt()
{
 94c:	df 93       	push	r29
 94e:	cf 93       	push	r28
 950:	cd b7       	in	r28, 0x3d	; 61
 952:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(UCSRB,RXCIE);
 954:	aa e2       	ldi	r26, 0x2A	; 42
 956:	b0 e0       	ldi	r27, 0x00	; 0
 958:	ea e2       	ldi	r30, 0x2A	; 42
 95a:	f0 e0       	ldi	r31, 0x00	; 0
 95c:	80 81       	ld	r24, Z
 95e:	80 68       	ori	r24, 0x80	; 128
 960:	8c 93       	st	X, r24
}
 962:	cf 91       	pop	r28
 964:	df 91       	pop	r29
 966:	08 95       	ret

00000968 <UART_setCallBack>:
void UART_setCallBack(void (*recieve_ptrCallBack)(void))
{
 968:	df 93       	push	r29
 96a:	cf 93       	push	r28
 96c:	00 d0       	rcall	.+0      	; 0x96e <UART_setCallBack+0x6>
 96e:	cd b7       	in	r28, 0x3d	; 61
 970:	de b7       	in	r29, 0x3e	; 62
 972:	9a 83       	std	Y+2, r25	; 0x02
 974:	89 83       	std	Y+1, r24	; 0x01
	g_uartRecieveCallBack = recieve_ptrCallBack;
 976:	89 81       	ldd	r24, Y+1	; 0x01
 978:	9a 81       	ldd	r25, Y+2	; 0x02
 97a:	90 93 6b 00 	sts	0x006B, r25
 97e:	80 93 6a 00 	sts	0x006A, r24
}
 982:	0f 90       	pop	r0
 984:	0f 90       	pop	r0
 986:	cf 91       	pop	r28
 988:	df 91       	pop	r29
 98a:	08 95       	ret

0000098c <UART_sendString>:
	 */
	    return UDR;
}
#endif
void UART_sendString(uint8 *s)
{
 98c:	df 93       	push	r29
 98e:	cf 93       	push	r28
 990:	00 d0       	rcall	.+0      	; 0x992 <UART_sendString+0x6>
 992:	0f 92       	push	r0
 994:	cd b7       	in	r28, 0x3d	; 61
 996:	de b7       	in	r29, 0x3e	; 62
 998:	9b 83       	std	Y+3, r25	; 0x03
 99a:	8a 83       	std	Y+2, r24	; 0x02
	uint8 count=0;
 99c:	19 82       	std	Y+1, r1	; 0x01
	UART_sendByte(0);
 99e:	80 e0       	ldi	r24, 0x00	; 0
 9a0:	0e 94 8f 04 	call	0x91e	; 0x91e <UART_sendByte>
 9a4:	0e c0       	rjmp	.+28     	; 0x9c2 <UART_sendString+0x36>
	while(s[count] != '\0')
	{
		UART_sendByte(s[count]);
 9a6:	89 81       	ldd	r24, Y+1	; 0x01
 9a8:	28 2f       	mov	r18, r24
 9aa:	30 e0       	ldi	r19, 0x00	; 0
 9ac:	8a 81       	ldd	r24, Y+2	; 0x02
 9ae:	9b 81       	ldd	r25, Y+3	; 0x03
 9b0:	fc 01       	movw	r30, r24
 9b2:	e2 0f       	add	r30, r18
 9b4:	f3 1f       	adc	r31, r19
 9b6:	80 81       	ld	r24, Z
 9b8:	0e 94 8f 04 	call	0x91e	; 0x91e <UART_sendByte>
		count++;
 9bc:	89 81       	ldd	r24, Y+1	; 0x01
 9be:	8f 5f       	subi	r24, 0xFF	; 255
 9c0:	89 83       	std	Y+1, r24	; 0x01
#endif
void UART_sendString(uint8 *s)
{
	uint8 count=0;
	UART_sendByte(0);
	while(s[count] != '\0')
 9c2:	89 81       	ldd	r24, Y+1	; 0x01
 9c4:	28 2f       	mov	r18, r24
 9c6:	30 e0       	ldi	r19, 0x00	; 0
 9c8:	8a 81       	ldd	r24, Y+2	; 0x02
 9ca:	9b 81       	ldd	r25, Y+3	; 0x03
 9cc:	fc 01       	movw	r30, r24
 9ce:	e2 0f       	add	r30, r18
 9d0:	f3 1f       	adc	r31, r19
 9d2:	80 81       	ld	r24, Z
 9d4:	88 23       	and	r24, r24
 9d6:	39 f7       	brne	.-50     	; 0x9a6 <UART_sendString+0x1a>
	{
		UART_sendByte(s[count]);
		count++;
	}
	UART_sendByte(s[count]);
 9d8:	89 81       	ldd	r24, Y+1	; 0x01
 9da:	28 2f       	mov	r18, r24
 9dc:	30 e0       	ldi	r19, 0x00	; 0
 9de:	8a 81       	ldd	r24, Y+2	; 0x02
 9e0:	9b 81       	ldd	r25, Y+3	; 0x03
 9e2:	fc 01       	movw	r30, r24
 9e4:	e2 0f       	add	r30, r18
 9e6:	f3 1f       	adc	r31, r19
 9e8:	80 81       	ld	r24, Z
 9ea:	0e 94 8f 04 	call	0x91e	; 0x91e <UART_sendByte>
}
 9ee:	0f 90       	pop	r0
 9f0:	0f 90       	pop	r0
 9f2:	0f 90       	pop	r0
 9f4:	cf 91       	pop	r28
 9f6:	df 91       	pop	r29
 9f8:	08 95       	ret

000009fa <UART_receiveString>:
void UART_receiveString(uint8 *s)
{
 9fa:	df 93       	push	r29
 9fc:	cf 93       	push	r28
 9fe:	00 d0       	rcall	.+0      	; 0xa00 <UART_receiveString+0x6>
 a00:	0f 92       	push	r0
 a02:	cd b7       	in	r28, 0x3d	; 61
 a04:	de b7       	in	r29, 0x3e	; 62
 a06:	9b 83       	std	Y+3, r25	; 0x03
 a08:	8a 83       	std	Y+2, r24	; 0x02
	uint8 count=0;
 a0a:	19 82       	std	Y+1, r1	; 0x01
	UART_sendByte(0);
 a0c:	80 e0       	ldi	r24, 0x00	; 0
 a0e:	0e 94 8f 04 	call	0x91e	; 0x91e <UART_sendByte>
		count++;
		s[count]=UART_receiveBytePolling();
	}
	s[count]='\0';
#elif(UART_TECHNIQUE==INTERRUPT)
	UART_receiveByteInterrupt();
 a12:	0e 94 a6 04 	call	0x94c	; 0x94c <UART_receiveByteInterrupt>
	s[count]=g_ubrr_Value;
 a16:	89 81       	ldd	r24, Y+1	; 0x01
 a18:	28 2f       	mov	r18, r24
 a1a:	30 e0       	ldi	r19, 0x00	; 0
 a1c:	8a 81       	ldd	r24, Y+2	; 0x02
 a1e:	9b 81       	ldd	r25, Y+3	; 0x03
 a20:	fc 01       	movw	r30, r24
 a22:	e2 0f       	add	r30, r18
 a24:	f3 1f       	adc	r31, r19
 a26:	80 91 69 00 	lds	r24, 0x0069
 a2a:	80 83       	st	Z, r24
 a2c:	10 c0       	rjmp	.+32     	; 0xa4e <UART_receiveString+0x54>
	while(s[count]!='#')
	{
		count++;
 a2e:	89 81       	ldd	r24, Y+1	; 0x01
 a30:	8f 5f       	subi	r24, 0xFF	; 255
 a32:	89 83       	std	Y+1, r24	; 0x01
		UART_receiveByteInterrupt();
 a34:	0e 94 a6 04 	call	0x94c	; 0x94c <UART_receiveByteInterrupt>
		s[count]=g_ubrr_Value;
 a38:	89 81       	ldd	r24, Y+1	; 0x01
 a3a:	28 2f       	mov	r18, r24
 a3c:	30 e0       	ldi	r19, 0x00	; 0
 a3e:	8a 81       	ldd	r24, Y+2	; 0x02
 a40:	9b 81       	ldd	r25, Y+3	; 0x03
 a42:	fc 01       	movw	r30, r24
 a44:	e2 0f       	add	r30, r18
 a46:	f3 1f       	adc	r31, r19
 a48:	80 91 69 00 	lds	r24, 0x0069
 a4c:	80 83       	st	Z, r24
	}
	s[count]='\0';
#elif(UART_TECHNIQUE==INTERRUPT)
	UART_receiveByteInterrupt();
	s[count]=g_ubrr_Value;
	while(s[count]!='#')
 a4e:	89 81       	ldd	r24, Y+1	; 0x01
 a50:	28 2f       	mov	r18, r24
 a52:	30 e0       	ldi	r19, 0x00	; 0
 a54:	8a 81       	ldd	r24, Y+2	; 0x02
 a56:	9b 81       	ldd	r25, Y+3	; 0x03
 a58:	fc 01       	movw	r30, r24
 a5a:	e2 0f       	add	r30, r18
 a5c:	f3 1f       	adc	r31, r19
 a5e:	80 81       	ld	r24, Z
 a60:	83 32       	cpi	r24, 0x23	; 35
 a62:	29 f7       	brne	.-54     	; 0xa2e <UART_receiveString+0x34>
	{
		count++;
		UART_receiveByteInterrupt();
		s[count]=g_ubrr_Value;
	}
	s[count]='\0';
 a64:	89 81       	ldd	r24, Y+1	; 0x01
 a66:	28 2f       	mov	r18, r24
 a68:	30 e0       	ldi	r19, 0x00	; 0
 a6a:	8a 81       	ldd	r24, Y+2	; 0x02
 a6c:	9b 81       	ldd	r25, Y+3	; 0x03
 a6e:	fc 01       	movw	r30, r24
 a70:	e2 0f       	add	r30, r18
 a72:	f3 1f       	adc	r31, r19
 a74:	10 82       	st	Z, r1
#endif

}
 a76:	0f 90       	pop	r0
 a78:	0f 90       	pop	r0
 a7a:	0f 90       	pop	r0
 a7c:	cf 91       	pop	r28
 a7e:	df 91       	pop	r29
 a80:	08 95       	ret

00000a82 <__udivmodsi4>:
 a82:	a1 e2       	ldi	r26, 0x21	; 33
 a84:	1a 2e       	mov	r1, r26
 a86:	aa 1b       	sub	r26, r26
 a88:	bb 1b       	sub	r27, r27
 a8a:	fd 01       	movw	r30, r26
 a8c:	0d c0       	rjmp	.+26     	; 0xaa8 <__udivmodsi4_ep>

00000a8e <__udivmodsi4_loop>:
 a8e:	aa 1f       	adc	r26, r26
 a90:	bb 1f       	adc	r27, r27
 a92:	ee 1f       	adc	r30, r30
 a94:	ff 1f       	adc	r31, r31
 a96:	a2 17       	cp	r26, r18
 a98:	b3 07       	cpc	r27, r19
 a9a:	e4 07       	cpc	r30, r20
 a9c:	f5 07       	cpc	r31, r21
 a9e:	20 f0       	brcs	.+8      	; 0xaa8 <__udivmodsi4_ep>
 aa0:	a2 1b       	sub	r26, r18
 aa2:	b3 0b       	sbc	r27, r19
 aa4:	e4 0b       	sbc	r30, r20
 aa6:	f5 0b       	sbc	r31, r21

00000aa8 <__udivmodsi4_ep>:
 aa8:	66 1f       	adc	r22, r22
 aaa:	77 1f       	adc	r23, r23
 aac:	88 1f       	adc	r24, r24
 aae:	99 1f       	adc	r25, r25
 ab0:	1a 94       	dec	r1
 ab2:	69 f7       	brne	.-38     	; 0xa8e <__udivmodsi4_loop>
 ab4:	60 95       	com	r22
 ab6:	70 95       	com	r23
 ab8:	80 95       	com	r24
 aba:	90 95       	com	r25
 abc:	9b 01       	movw	r18, r22
 abe:	ac 01       	movw	r20, r24
 ac0:	bd 01       	movw	r22, r26
 ac2:	cf 01       	movw	r24, r30
 ac4:	08 95       	ret

00000ac6 <_exit>:
 ac6:	f8 94       	cli

00000ac8 <__stop_program>:
 ac8:	ff cf       	rjmp	.-2      	; 0xac8 <__stop_program>
